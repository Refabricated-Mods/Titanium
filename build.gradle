plugins {
  id 'java'
  id 'maven-publish'
  id 'fabric-loom' version '0.12-SNAPSHOT' apply false
}
if (rootProject == project){
  apply plugin: "fabric-loom";
}
//apply from: 'https://raw.githubusercontent.com/SizableShrimp/Forge-Class-Remapper/main/classremapper.gradle'

version = "${minecraft_version}-${project.api_version}"
if (System.getenv('BUILD_NUMBER') != null) {
  version += "-" + System.getenv('BUILD_NUMBER')
}
group = 'com.hrznstudio'
archivesBaseName = 'titanium'
def isReleaseBranch = System.getenv("GIT_BRANCH") == "1.18-fabric";

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

/*license {
  header = project.file('HEADER')
  ext {
    year = Calendar.getInstance().get(Calendar.YEAR)
    name = 'Horizon Studio'
    email = 'contact@hrznstudio.com'
    mod = 'Titanium'
  }
}*/

loom {
  accessWidenerPath = file("src/main/resources/titanium.accesswidener")
  runs {
    datagen {
      server()

      name = "Data Generation"
      runDir = "build/datagen"

      vmArg("-Dfabric-api.datagen")
      vmArg("-Dfabric-api.datagen.output-dir=${file("src/main/generated")}")
    }
  }
}

repositories {
  mavenCentral()
  maven {
    // location of the maven that hosts JEI files
    name = "Progwml6 maven"
    url = "https://dvs1.progwml6.com/files/maven/"
  }
  maven {
    // location of a maven mirror for JEI files, as a fallback
    name = "ModMaven"
    url = "https://modmaven.k-4u.nl"
  }
  maven {
    url "https://maven.tterrag.com/"
  }
  maven {
    url 'https://www.dogforce-games.com/maven/'
  }
  maven {
    name = 'parchment'
    url = 'https://maven.parchmentmc.org'
  }
  maven {
    url = uri("https://storage.googleapis.com/devan-maven/")
  }
  maven { url "https://maven.shedaniel.me/" }
  maven {
    url "https://maven.terraformersmc.com"
    content {
      includeGroup "com.terraformersmc"
    }
  }
  maven {
    name = "Fuzs Mod Resources"
    url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"
  }
  maven {
    url "https://repo.repsy.io/mvn/distant/feltmc"
  }
  maven { url = "https://mvn.devos.one/snapshots/" }
  maven { url 'https://jitpack.io' }
}
dependencies {
  minecraft "com.mojang:minecraft:${project.minecraft_version}"
  mappings loom.layered() {
    officialMojangMappings()
    parchment("org.parchmentmc.data:parchment-${project.minecraft_version}:${project.mappings_version}@zip")
  }
  modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
  modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
  include modApi("teamreborn:energy:${project.tr_energy_version}") {
    exclude(group: "net.fabricmc.fabric-api")
  }
  modImplementation(include("net.minecraftforge:forgeconfigapiport-fabric:3.2.4"))
  implementation("com.github.LlamaLad7:MixinExtras:0.1.1")
  //modImplementation(include("com.github.FeltMC:ForgeFelt-EventBus:${rootProject.event_bus_hash}")) { transitive(false) }
  include("io.github.fabricators_of_create:Porting-Lib:${project.port_lib_version}-beta+1.18.2-stable"){ transitive(false) }
  modImplementation("io.github.fabricators_of_create:Porting-Lib:${project.port_lib_version}-beta+1.18.2-stable"){
    exclude(group: "net.fabricmc.fabric-api")
    exclude(group: "com.github.LlamaLad7")
  }
  modCompileOnly("mezz.jei:jei-${project.minecraft_version}-fabric-api:10.1.0.223")
  modImplementation(include("io.github.feltmc:felt-screen-api:1.0.0"))
  //modImplementation(include("io.github.feltmc:fabricated-forge-recipe-api:0.1.1"))
  modApi "me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}"
}

processResources {

  def toReplace = [
    "version"             : project.version
  ]

  inputs.properties toReplace
  filesMatching("fabric.mod.json") {
    expand toReplace
  }
}
java {
  withSourcesJar()
}

/*task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}*/

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

task deobfJar(type: Jar) {
  from sourceSets.main.output
  classifier 'deobf'
}

artifacts {
  //archives sourcesJar
  archives javadocJar
  archives deobfJar
}

publish.dependsOn(project.tasks.getByName("assemble"))
publish.mustRunAfter(project.tasks.getByName("build"))

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
    }
  }
  repositories {
    if (isReleaseBranch) {
      maven {
        url "file://" + System.getenv("local_maven")
      }
    } else {
      mavenLocal()
    }
  }
}
